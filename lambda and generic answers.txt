Lambda expression
1. Write a Java program to implement a lambda expression to find the sum of two integers.
// SumCalculator.java 

interface SumCalculator {
    int sum(int a, int b);
}
// Main.java
public class Main {
    public static void main(String[] args) {
        SumCalculator sumCalculator = (x, y) -> x + y;
        int result = sumCalculator.sum(7, 6);
        System.out.println("Sum 7,6): " + result);
	result = sumCalculator.sum(15, -35);
        System.out.println("Sum 15, -35): " + result);
    }
}

2. Write a Java program to implement a lambda expression to check if a given string is empty.
// Main.java
import java.util.function.Predicate;

public class Main {
    public static void main(String[] args) {
        // Lambda expression to check if a given string is empty
        Predicate isEmptyString = str -> str.isEmpty();

        // Test cases
        String str1 = ""; // empty string
        String str2 = "Java lambda expression!"; // non-empty string

        // Check if the strings are empty using the lambda expression
		System.out.println("String 1:" + str1);
        System.out.println("String 1 is empty: " + isEmptyString.test(str1));
        System.out.println("\nString 2:" + str2);
		System.out.println("String 2 is empty: " + isEmptyString.test(str2));
    }
}

3. Write a Java program to implement a lambda expression to convert a list of strings to uppercase and lowercase.
// Main.java
import java.util.Arrays;
import java.util.List;

public class Main {
    public static void main(String[] args) {
        // Create a list of strings
        List stringList = Arrays.asList("Red", "Green", "Blue", "PINK");

        // Print the original strings
        System.out.println("\nOriginal strings:");
        for (String str : stringList) {
            System.out.println(str);
        } 

        // Convert strings to lowercase using lambda expression
        stringList.replaceAll(str -> str.toLowerCase());

        // Print the list of lowercase strings
        System.out.println("\nLowercase strings:");
        for (String str : stringList) {
            System.out.println(str);
        }
		
		// Convert strings to uppercase using lambda expression
        stringList.replaceAll(str -> str.toUpperCase());

        // Print the list of uppercase strings
        System.out.println("\nUppercase strings:");
        for (String str : stringList) {
            System.out.println(str);
        }
    }
}

4. Write a Java program to implement a lambda expression to filter out even and odd numbers from a list of integers.
// Main.java
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class Main {
    public static void main(String[] args) {
        // Create a list of integers
        List nums = Arrays.asList(11, 23, 98, 34, 15, 32, 42, 80, 99, 100);
        
		// Print the original numbers
        System.out.println("Original numbers:");
        for (int n : nums) {
            System.out.print(n+ " ");
        }		

        // Filter out even numbers using lambda expression
        List evenNumbers = nums.stream()
                .filter(n -> n % 2 == 0)
                .collect(Collectors.toList());

        // Print the even numbers
        System.out.print("\nEven numbers:");
        for (int num : evenNumbers) {
            System.out.print(num + " ");
        }

        // Filter out odd numbers using lambda expression
        List oddNumbers = nums.stream()
                .filter(num -> num % 2 != 0)
                .collect(Collectors.toList());

        // Print the odd numbers
        System.out.print("\nOdd numbers:");
        for (int num : oddNumbers) {
            System.out.print(num + " ");
        }
    }
}

5. Write a Java program to implement a lambda expression to sort a list of strings in alphabetical order.
import java.util.Arrays;
import java.util.List;

public class Main {
    public static void main(String[] args) {
        // Create a list of strings
        List colors = Arrays.asList("red", "green", "blue", "black", "pink");

        // Print the Original list of strings
        System.out.println("Original strings:");
        for (String str : colors) {
            System.out.print(str + ' ');
        }

        // Sort the list of strings in alphabetical order using lambda expression
        colors.sort((str1, str2) -> str1.compareToIgnoreCase(str2));

        // Print the sorted list of strings
        System.out.println("\nSorted strings:");
        for (String str : colors) {
            System.out.print(str + ' ');
        }
    }
}


Generic
1. Write a Java program to create a generic method that takes two arrays of the same type and checks if they have the same elements in the same order.
// ArrayCompare.java
// ArrayCompare Class
import java.util.Arrays;
public class ArrayCompare {
  public static < T > boolean compare_Arrays(T[] array1, T[] array2) {
    if (array1.length != array2.length) {
      return false;
    }

    for (int i = 0; i < array1.length; i++) {
      if (!array1[i].equals(array2[i])) {
        return false;
      }
    }
    return true;
  }

  public static void main(String[] args) {
    Integer[] arr1 = {
      1,
      2,
      3,
      4
    };
    Integer[] arr2 = {
      1,
      2,
      4,
      4
    };
    Integer[] arr3 = {
      1,
      2,
      3,
      4
    };
    String[] arr4 = {
      "Java",
      "World"
    };
    String[] arr5 = {
      "JavaScript",
      "World"
    };
    String[] arr6 = {
      "Java",
      "World"
    };
    System.out.println("Original arrays:");
    System.out.println("arr1: " + Arrays.toString(arr1));
    System.out.println("arr2: " + Arrays.toString(arr2));
    System.out.println("arr3: " + Arrays.toString(arr3));
    System.out.println("arr4: " + Arrays.toString(arr4));
    System.out.println("arr5: " + Arrays.toString(arr5));
    System.out.println("arr6: " + Arrays.toString(arr6));
    System.out.println("\nCompare arr1 and arr2: " + compare_Arrays(arr1, arr2)); //false
    System.out.println("Compare arr1 and arr3: " + compare_Arrays(arr1, arr3)); //true
    System.out.println("Compare arr4 and arr5: " + compare_Arrays(arr4, arr5)); //false
    System.out.println("Compare arr4 and arr6: " + compare_Arrays(arr4, arr6)); //true     		
  }
}

2. Write a Java program to create a generic method that takes a list of numbers and returns the sum of all the even and odd numbers.
// EvenOddSumCalculator.java
// EvenOddSumCalculator Class
import java.util.List;
public class EvenOddSumCalculator {
  public static < T extends Number > void calculateNumberSum(List < T > numbers) {
    double evenSum = 0;
    double oddSum = 0;

    for (T number: numbers) {
      if (number.doubleValue() % 2 == 0) {
        evenSum += number.doubleValue();
      } else {
        oddSum += number.doubleValue();
      }
    }
    System.out.println("\nOriginal list of numbers: " + numbers);
    System.out.println("Sum of even numbers: " + evenSum);
    System.out.println("Sum of odd numbers: " + oddSum);
  }

  public static void main(String[] args) {
    List < Integer > integers = List.of(1, 2, 3, 4, 5, 6, 7);
    List < Double > doubles = List.of(2.0, 1.5, 4.5, 2.5, 1.5);

    calculateNumberSum(integers);
    calculateNumberSum(doubles);
  }
}

3. Write a Java program to create a generic method that takes a list of any type and a target element. It returns the index of the first occurrence of the target element in the list. Return -1 if the target element cannot be found.
// FindElement.java
// FindElement Class
import java.util.List;

public class FindElement {

  public static < T > int findIndexOfElement(List < T > list, T target) {
    for (int i = 0; i < list.size(); i++) {
      if (list.get(i).equals(target)) {
        return i;
      }
    }

    return -1;
  }

  public static void main(String[] args) {
    List < Integer > numbers = List.of(1, 2, 3, 4, 5);
    List < String > colors = List.of("Red", "Green", "Blue", "Orange", "White");
    System.out.println("Original list elements:");
    System.out.println("Nums: " + numbers);
    System.out.println("Colors: " + colors);

    int index1 = findIndexOfElement(numbers, 3);
    System.out.println("\nIndex of 3 in numbers: " + index1); // Output: 2

    int index2 = findIndexOfElement(numbers, 6);
    System.out.println("Index of 6 in numbers: " + index2); // Output: -1

    int index3 = findIndexOfElement(colors, "Green");
    System.out.println("Index of \"Green\" in colors: " + index3); // Output: 1

    int index4 = findIndexOfElement(colors, "Black");
    System.out.println("Index of \"Black\" in colors: " + index4); // Output: -1
  }
}

4. Write a Java program to create a generic method that takes a list of any type and returns it as a new list with the elements in reverse order.
// ReverserList.java
// ReverserList Class
import java.util.ArrayList;
import java.util.List;

public class ReverserList {

  public static < T > List < T > reverseList(List < T > originalList) {
    List < T > reversedList = new ArrayList < > ();

    for (int i = originalList.size() - 1; i >= 0; i--) {
      reversedList.add(originalList.get(i));
    }

    return reversedList;
  }

  public static void main(String[] args) {
    List < Integer > numbers = List.of(1, 2, 3, 4, 5, 6);
    List < String > colors = List.of("Red", "Green", "Orange");

    List < Integer > reversedNumbers = reverseList(numbers);
    System.out.println("Original list of numbers: " + numbers);
    System.out.println("Reversed numbers: " + reversedNumbers); // Output: [6, 5, 4, 3, 2, 1]

    List < String > reversedWords = reverseList(colors);
    System.out.println("\nOriginal list of colors: " + colors);
    System.out.println("Reversed colors: " + reversedWords); // Output: [Orange, Green, Red]
  }
}

5. Write a Java program to create a generic method that takes two lists of the same type and merges them into a single list. This method alternates the elements of each list.
// ReverserList.java
// ReverserList Class
import java.util.ArrayList;
import java.util.List;

public class Merge_two_lists {

  public static < T > List < T > mergeLists(List < T > list1, List < T > list2) {
    List < T > mergedList = new ArrayList < > ();

    int maxLength = Math.max(list1.size(), list2.size());
    for (int i = 0; i < maxLength; i++) {
      if (i < list1.size()) {
        mergedList.add(list1.get(i));
      }

      if (i < list2.size()) {
        mergedList.add(list2.get(i));
      }
    }

    return mergedList;
  }

  public static void main(String[] args) {
    List < Integer > nums1 = List.of(1, 3, 5, 7);
    List < Integer > nums2 = List.of(2, 4, 8, 10);
    System.out.println("List of numbers:");
    System.out.println(nums1);
    System.out.println(nums2);
    List < String > colors1 = List.of("Red", "Green", "Blue");
    List < String > colors2 = List.of("White", "Black", "Orange", "Pink");
    System.out.println("\nList of colors:");
    System.out.println(colors1);
    System.out.println(colors2);
    List < Integer > mergedNumbers = mergeLists(nums1, nums2);
    // Output:[1, 2, 3, 4, 5, 8, 7, 10]
    System.out.println("\nMerged Numbers: " + mergedNumbers);
    // Output:[Red, White, Green, Black, Blue, Orange, Pink]
    List < String > mergedWords = mergeLists(colors1, colors2);
    System.out.println("Merged Colors: " + mergedWords);
  }
}


