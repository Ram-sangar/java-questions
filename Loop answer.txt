

1.print all natural numbers from 1 to n.

public class NaturalNumbers {

    public static void main(String[] args) {
        int n = 10;		
   	if (n < 1) {
            System.out.println(" number is less than 0.");
        } else {
            System.out.println("Natural numbers from 1 to " + n + ":");
            while (int i <= n) {
                System.out.print(i + " ");
		i++;
            }
        }
    }
}


2.print all natural numbers in reverse (from n to 1).

public class ReverseNaturalNumbers {

    public static void main(String[] args) {
        int n = 10;
	if (n < 1) {
            System.out.println("number is less than 0.");
        } else {
            System.out.println("Natural numbers in reverse from " + n + " to 1:");
		int i = 0;
            while (i >= 1) {
                System.out.print(i + " ");
		i++;
            }
        }
    }
}

3.find sum of all natural numbers between 1 to n.

public class SumOfNaturalNumbers {

    public static void main(String[] args) {
        int n = 10;
        int sum = 0;
	 if (n < 1) {
            System.out.println("number is less than 0.");
        } else {
		int i= 0;
            while ( i <= n) {
                sum += i;
		i++;
            }
        }
        System.out.println("Sum of natural numbers from 1 to " + n + ": " + sum);
    }
}

4.find sum of all even numbers between 1 to n.

public class SumOfEvenNumbers {

    public static void main(String[] args) {
        int n = 10;
        int sum = 0;
	if (n < 1) {
            System.out.println("Please enter a positive number greater than 0.");
        } else {
		int i = 0;
            while (i <= n) {
                sum += i;
		i++;
            }
        }
        System.out.println("Sum of even numbers from 1 to " + n + ": " + evenSum);
    }
}

5.print multiplication table of any number.

public class MultiplicationTable {

    public static void main(String[] args) {
        int number = 9;
	System.out.println("Multiplication table of " + number + ":");
        for (int i = 1; i <= 10; i++) {
            System.out.println(number + " * " + i + " = " + (number * i));
        }
    }
}

6.count number of digits in a number.

public class CountDigits {

    public static void main(String[] args) {
	int number = 846282363476;
	int count = 0;
        while (number != 0) {
            number /= 10;
            count++;
        }
        System.out.println("Number of digits in " + inputNumber + ": " + count);
    }
}

7.Write a program that reads a set of integers, and then prints the sum of the even and odd integers.

import java.util.Scanner;

public class SumEvenOdd {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter the number of integers: ");
        int n = scanner.nextInt();

        int evenSum = 0;
        int oddSum = 0;

        System.out.println("Enter the integers:");

        for (int i = 0; i < n; i++) {
            int num = scanner.nextInt();

            if (num % 2 == 0) {
                evenSum += num;
            } else {
                oddSum += num;
            }
        }

        System.out.println("Sum of even numbers: " + evenSum);
        System.out.println("Sum of odd numbers: " + oddSum);

        scanner.close();
    }
}


9.check whether a number is armstrong number or not.

import java.util.Scanner;

public class ArmstrongNumber {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter a number to check if it's an Armstrong number: ");
        int number = scanner.nextInt();

        if (isArmstrong(number)) {
            System.out.println(number + " is an Armstrong number.");
        } else {
            System.out.println(number + " is not an Armstrong number.");
        }

        scanner.close();
    }

    public static boolean isArmstrong(int num) {
        int originalNumber, remainder, result = 0, n = 0;

        originalNumber = num;

        while (originalNumber != 0) {
            originalNumber /= 10;
            ++n;
        }

        originalNumber = num;

        while (originalNumber != 0) {
            remainder = originalNumber % 10;
            result += Math.pow(remainder, n);
            originalNumber /= 10;
        }

        return result == num;
    }
}