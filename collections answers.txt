1. Write a Java program to create an array list, add some colors (strings) and print out the collection.
import java.util.*;
public class Exercise1 {
  public static void main(String[] args) {
  List<String> list_Strings = new ArrayList<String>();
  list_Strings.add("Red");
  list_Strings.add("Green");
  list_Strings.add("Orange");
  list_Strings.add("White");
  list_Strings.add("Black");
  System.out.println(list_Strings);
 }
}

2. Write a Java program to search for an element in an array list.
import java.util.*;
  public class Exercise2 {
  public static void main(String[] args) {
  // Creae a list and add some colors to the list
  List<String> list_Strings = new ArrayList<String>();
  list_Strings.add("Red");
  list_Strings.add("Green");
  list_Strings.add("Orange");
  list_Strings.add("White");
  list_Strings.add("Black");
  // Search the value Red
    if (list_Strings.contains("Red")) {
    System.out.println("Found the element");
    } else {
    System.out.println("There is no such element");
    }
 }
}

3. Write a Java program to copy one array list into another.

import java.util.*;
  public class Exercise9 {
  public static void main(String[] args) {
  List<String> List1 = new ArrayList<String>();
  List1.add("1");
  List1.add("2");
  List1.add("3");
  List1.add("4");
  System.out.println("List1: " + List1);
  List<String> List2 = new ArrayList<String>();
  List2.add("A");
  List2.add("B");
  List2.add("C");
  List2.add("D");
  System.out.println("List2: " + List2);
  // Copy List2 to List1
  Collections.copy(List1, List2);
  System.out.println("Copy List to List2,\nAfter copy:");
  System.out.println("List1: " + List1);
  System.out.println("List2: " + List2);
 }
}

4. Write a Java program to shuffle elements in an array list.
import java.util.*;
  public class Exercise10 {
  public static void main(String[] args) {
  // Creae a list and add some colors to the list
  List<String> list_Strings = new ArrayList<String>();
  list_Strings.add("Red");
  list_Strings.add("Green");
  list_Strings.add("Orange");
  list_Strings.add("White");
  list_Strings.add("Black");
  System.out.println("List before shuffling:\n" + list_Strings);  
  Collections.shuffle(list_Strings);
  System.out.println("List after shuffling:\n" + list_Strings); 
 }
}

1. Write a Java program to append the specified element to the end of a hash set.
import java.util.HashSet;
  public class Exercise1 {
  public static void main(String[] args) {
     // Create a empty hash set
     HashSet<String> h_set = new HashSet<String>();
   // use add() method to add values in the hash set
          h_set.add("Red");
          h_set.add("Green");
          h_set.add("Black");
          h_set.add("White");
          h_set.add("Pink");
          h_set.add("Yellow");

   // print the hash set
   System.out.println("The Hash Set: " + h_set);
   }
}

2. Write a Java program to iterate through all elements in a hash list.
import java.util.*;
import java.util.Iterator;
  public class Exercise2 {
  public static void main(String[] args) {
         // Create a empty hash set
     HashSet<String> h_set = new HashSet<String>();
   // use add() method to add values in the hash set
          h_set.add("Red");
          h_set.add("Green");
          h_set.add("Black");
          h_set.add("White");
          h_set.add("Pink");
          h_set.add("Yellow");

  // set Iterator 
    Iterator<String> p = h_set.iterator();
  // Iterate the hash set
   while (p.hasNext()) {
   System.out.println(p.next());
   }
   }
}


3. Write a Java program to get the number of elements in a hash set.
import java.util.*;
import java.util.Iterator;
  public class Exercise3 {
  public static void main(String[] args) {
         // Create a empty hash set
     HashSet<String> h_set = new HashSet<String>();
   // use add() method to add values in the hash set
          h_set.add("Red");
          h_set.add("Green");
          h_set.add("Black");
          h_set.add("White");
          h_set.add("Pink");
          h_set.add("Yellow");
    System.out.println("Original Hash Set: " + h_set);
    System.out.println("Size of the Hash Set: " + h_set.size());
   }
}


4. Write a Java program to empty an hash set.
import java.util.*;

  public class Exercise4 {
  public static void main(String[] args) {
         // Create a empty hash set
     HashSet<String> h_set = new HashSet<String>();
   // use add() method to add values in the hash set
          h_set.add("Red");
          h_set.add("Green");
          h_set.add("Black");
          h_set.add("White");
          h_set.add("Pink");
          h_set.add("Yellow");
    System.out.println("Original Hash Set: " + h_set);
    // Remove all elements
    h_set.removeAll(h_set);
    System.out.println("Hash Set after removing all the elements "+h_set);   
   }
}

Hashset
1. Write a Java program to append the specified element to the end of a hash set.
import java.util.HashSet;
  public class Exercise1 {
  public static void main(String[] args) {
     // Create a empty hash set
     HashSet<String> h_set = new HashSet<String>();
   // use add() method to add values in the hash set
          h_set.add("Red");
          h_set.add("Green");
          h_set.add("Black");
          h_set.add("White");
          h_set.add("Pink");
          h_set.add("Yellow");

   // print the hash set
   System.out.println("The Hash Set: " + h_set);
   }
}


2. Write a Java program to iterate through all elements in a hash list.
import java.util.*;
import java.util.Iterator;
  public class Exercise2 {
  public static void main(String[] args) {
         // Create a empty hash set
     HashSet<String> h_set = new HashSet<String>();
   // use add() method to add values in the hash set
          h_set.add("Red");
          h_set.add("Green");
          h_set.add("Black");
          h_set.add("White");
          h_set.add("Pink");
          h_set.add("Yellow");

  // set Iterator 
    Iterator<String> p = h_set.iterator();
  // Iterate the hash set
   while (p.hasNext()) {
   System.out.println(p.next());
   }
   }
}

3. Write a Java program to get the number of elements in a hash set.
import java.util.*;
import java.util.Iterator;
  public class Exercise3 {
  public static void main(String[] args) {
         // Create a empty hash set
     HashSet<String> h_set = new HashSet<String>();
   // use add() method to add values in the hash set
          h_set.add("Red");
          h_set.add("Green");
          h_set.add("Black");
          h_set.add("White");
          h_set.add("Pink");
          h_set.add("Yellow");
    System.out.println("Original Hash Set: " + h_set);
    System.out.println("Size of the Hash Set: " + h_set.size());
   }
}

4. Write a Java program to empty an hash set.import java.util.*;

  public class Exercise4 {
  public static void main(String[] args) {
         // Create a empty hash set
     HashSet<String> h_set = new HashSet<String>();
   // use add() method to add values in the hash set
          h_set.add("Red");
          h_set.add("Green");
          h_set.add("Black");
          h_set.add("White");
          h_set.add("Pink");
          h_set.add("Yellow");
    System.out.println("Original Hash Set: " + h_set);
    // Remove all elements
    h_set.removeAll(h_set);
    System.out.println("Hash Set after removing all the elements "+h_set);   
   }
}


Treeset
1. Write a Java program to iterate through all elements in a tree set.
import java.util.TreeSet;
public class Exercise1 {
  public static void main(String[] args) {
  TreeSet<String> tree_set = new TreeSet<String>();
  tree_set.add("Red");
  tree_set.add("Green");
  tree_set.add("Orange");
  tree_set.add("White");
  tree_set.add("Black");
  // Print the tree list
  for (String element : tree_set) {
    System.out.println(element);
    }
 }
}

2. Write a Java program to add all the elements of a specified tree set to another tree set.
import java.util.TreeSet;
public class Exercise2 {
  public static void main(String[] args) {
  TreeSet<String> tree_set1 = new TreeSet<String>();
  tree_set1.add("Red");
  tree_set1.add("Green");
  tree_set1.add("Orange");
  System.out.println("Tree set1: "+tree_set1);
  TreeSet<String> tree_set2 = new TreeSet<String>();
  tree_set2.add("Pink");
  tree_set2.add("White");
  tree_set2.add("Black");
  System.out.println("Tree set2: "+tree_set2);
   // adding treetwo to treeone
   tree_set1.addAll(tree_set2);
   System.out.println("Tree set1: "+tree_set1);
 }
}

3. Write a Java program to retrieve and remove the last element of a tree set.
import java.util.TreeSet;
import java.util.Iterator;

  public class Exercise3 {
  public static void main(String[] args) {
 // creating TreeSet 
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
     
   // Add numbers in the tree
   tree_num.add(10);
   tree_num.add(22);
   tree_num.add(36);
   tree_num.add(25);
   tree_num.add(16);
   tree_num.add(70);
   tree_num.add(82);
   tree_num.add(89);
   tree_num.add(14);
   System.out.println("Original tree set: "+tree_num);
   System.out.println("Removes the last element: "+tree_num.pollLast());
   System.out.println("Tree set after removing last element: "+tree_num);
   }    
}

4. Write a Java program to remove a given element from a tree set.
import java.util.TreeSet;
import java.util.Iterator;

  public class Exercise4 {
  public static void main(String[] args) {
 // creating TreeSet 
   TreeSet <Integer>tree_num = new TreeSet<Integer>();
   TreeSet <Integer>treeheadset = new TreeSet<Integer>();
     
   // Add numbers in the tree
   tree_num.add(10);
   tree_num.add(22);
   tree_num.add(36);
   tree_num.add(25);
   tree_num.add(16);
   tree_num.add(70);
   tree_num.add(82);
   tree_num.add(89);
   tree_num.add(14);
   System.out.println("Original tree set: "+tree_num);
   System.out.println("Removes 70 from the list: "+tree_num.remove(70));
   System.out.println("Tree set after removing last element: "+tree_num);
   }    
}

Hashmap
1. Write a Java program to count the number of key-value (size) mappings in a map.
import java.util.*;  
public class Example2 {  
   public static void main(String args[]){  
  HashMap<Integer,String> hash_map= new HashMap<Integer,String>();  
  hash_map.put(1, "Red");
  hash_map.put(2, "Green");
  hash_map.put(3, "Black");
  hash_map.put(4, "White");
  hash_map.put(5, "Blue");
  System.out.println("Size of the hash map: "+hash_map.size());
 }
}

2. Write a Java program to copy all mappings from the specified map to another map.
import java.util.*;  
public class Example3 {  
   public static void main(String args[]) {
  // create two hash maps
  HashMap <Integer,String> hash_map1 = new HashMap <Integer,String> ();
  HashMap <Integer,String> hash_map2 = new HashMap <Integer,String> ();
  // populate hash maps
  hash_map1.put(1, "Red");
  hash_map1.put(2, "Green");
  hash_map1.put(3, "Black");
  System.out.println("\nValues in first map: " + hash_map1);
  hash_map2.put(4, "White");
  hash_map2.put(5, "Blue");
  hash_map2.put(6, "Orange");
  System.out.println("\nValues in second map: " + hash_map2);

  // put all values in secondmap
  hash_map2.putAll(hash_map1);
  System.out.println("\nNow values in second map: " + hash_map2);
 }
}

3. Write a Java program to get a set view of the keys contained in this map.
import java.util.*;  
public class Example11 {  
     public static void main(String args[]){  
 
  HashMap<Integer,String> hash_map= new HashMap<Integer,String>();  
  
  hash_map.put(1,"Red");
  hash_map.put(2,"Green");
  hash_map.put(3,"Black");
  hash_map.put(4,"White");
  hash_map.put(5,"Blue");
  
  // get keyset value from map
   Set keyset = hash_map.keySet();
      
  // check key set values
   System.out.println("Key set values are: " + keyset);  
 }
}

4. Write a Java program to get a collection view of the values contained in this map.
import java.util.*;  
public class Example12 {  
     public static void main(String args[]){  
 
  HashMap<Integer,String> hash_map= new HashMap<Integer,String>();  
    hash_map.put(1,"Red");
  hash_map.put(2,"Green");
  hash_map.put(3,"Black");
  hash_map.put(4,"White");
  hash_map.put(5,"Blue");
       
   // checking collection view of the map
   System.out.println("Collection view is: "+ hash_map.values());
 }
}

Linkedhashmap
1. Create a LinkedHashMap in Java.
import java.util.LinkedHashMap;
import java.util.Map;

class MainClass {
	public static void main(String[] args) {

		// Creating a LinkedHashMap
		Map<String, Integer> map = new LinkedHashMap<>();

        // Adding some key-value pairs to the map
        map.put("Rohan", 90);
        map.put("Mohan", 80);
        map.put("Sohan", 70);
        map.put("David", 60);

        // Iterating over the entries in the order they were added
        for (Map.Entry<String, Integer> entry : map.entrySet()) {
            System.out.println(entry.getKey() + ": " + entry.getValue());
        }

	}
}

2. How to Removing and Traversing elements.
import java.util.LinkedHashMap;
import java.util.Map;

class MainClass {
	public static void main(String[] args) {

		// Creating a LinkedHashMap
		Map<String, Integer> map = new LinkedHashMap<>();

        // Adding some key-value pairs to the map
        map.put("Rohan", 90);
        map.put("Mohan", 80);
        map.put("Sohan", 70);
        map.put("David", 60);

        
        System.out.println(map);
        
        // Removing elements
        map.remove("Mohan");
        
        System.out.println("Map after removing one element: ");
        // Traversing elements
        for (Map.Entry<String, Integer> entry : map.entrySet()) {
            System.out.println(entry.getKey() + ": " + entry.getValue());
        }

	}
}

3. How to Iterating over the entries in reverse order.
import java.util.ArrayList;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.ListIterator;
import java.util.Map;
import java.util.Map.Entry;

class MainClass {
	public static void main(String[] args) {

		// Creating a LinkedHashMap
		Map<String, Integer> map = new LinkedHashMap<>();

        // Adding some key-value pairs to the map
        map.put("Rohan", 90);
        map.put("Mohan", 80);
        map.put("Sohan", 70);
        map.put("David", 60);


        ListIterator<Entry<String, Integer>> iter = new LinkedList<>(new ArrayList<>(map.entrySet())).listIterator(map.size());
        while (iter.hasPrevious()) {
            Entry<String, Integer> entry = iter.previous();
            String key = entry.getKey();
            int value = entry.getValue();
            System.out.println(key + " = " + value);
        }

	}
}	

4. How to remove the oldest entry.
import java.util.LinkedHashMap;
import java.util.Map;

class MainClass {
	public static void main(String[] args) {

		// Creating a LinkedHashMap
		Map<String, Integer> map = new LinkedHashMap<String, Integer>(4, 0.75f, true) {
            protected boolean removeEldestEntry(Map.Entry<String, Integer> eldest) {
                return size() > 3;
            }
        };

        // Adding some key-value pairs to the map
        map.put("Rohan", 90);
        map.put("Mohan", 80);
        map.put("Sohan", 70);
        
        System.out.println(map);

        // Adding new entry
        map.put("John", 45);
        
        System.out.println(map);
	}
}