
  1. Write a Java program to calculate the average of a list of integers using streams.
import java.util.Arrays;
import java.util.List;

public class Main {
  public static void main(String[] args) {
    List < Integer > nums = Arrays.asList(1, 3, 6, 8, 10, 18, 36);
    System.out.println("List of numbers: " + nums);

    // Calculate the average using streams
    double average = nums.stream()
      .mapToDouble(Integer::doubleValue)
      .average()
      .orElse(0.0);

    System.out.println("Average value of the said numbers: " + average);
  }
}

2. Write a Java program to convert a list of strings to uppercase or lowercase using streams.
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class Main {
  public static void main(String[] args) {
    List < String > colors = Arrays.asList("RED", "grEEn", "white", "Orange", "pink");
    System.out.println("List of strings: " + colors);
    // Convert strings to uppercase using streams
    List < String > uppercaseStrings = colors.stream()
      .map(String::toUpperCase)
      .collect(Collectors.toList());

    System.out.println("\nUppercase Strings: " + uppercaseStrings);

    // Convert strings to lowercase using streams
    List < String > lowercaseStrings = colors.stream()
      .map(String::toLowerCase)
      .collect(Collectors.toList());

    System.out.println("Lowercase Strings: " + lowercaseStrings);
  }
}

3. Write a Java program to calculate the sum of all even, odd numbers in a list using streams.
import java.util.Arrays;
import java.util.List;

public class NumberSum {
  public static void main(String[] args) {
    List < Integer > numbers = Arrays.asList(1, 2, 3, 4, 5, 6, 7, 8, 9, 10);

    // Sum of even numbers
    int sumOfEvens = numbers.stream()
      .filter(num -> num % 2 == 0)
      .mapToInt(Integer::intValue)
      .sum();

    System.out.println("Sum of even numbers: " + sumOfEvens);

    // Sum of odd numbers
    int sumOfOdds = numbers.stream()
      .filter(num -> num % 2 != 0)
      .mapToInt(Integer::intValue)
      .sum();

    System.out.println("Sum of odd numbers: " + sumOfOdds);
  }
}

4. Write a Java program to remove all duplicate elements from a list using streams.
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;

public class Main {
  public static void main(String[] args) {
    List < Integer > nums = Arrays.asList(10, 23, 22, 23, 24, 24, 33, 15, 26, 15);
    System.out.println("Original List of numbers: " + nums);
    // Remove duplicates
    List < Integer > distinctNumbers = nums.stream()
      .distinct()
      .collect(Collectors.toList());
    System.out.println("After removing duplicates from the said list: " + distinctNumbers);
  }
}

5. Write a Java program to count the number of strings in a list that start with a specific letter using streams.
import java.util.Arrays;
import java.util.List;

public class Main {
  public static void main(String[] args) {
    List < String > colors = Arrays.asList("Red", "Green", "Blue", "Pink", "Brown");
    System.out.println("Original list of strings (colors): " + colors);
    char startingLetter = 'B';
    // Count strings starting with a specific letter
    long ctr = colors.stream()
      .filter(s -> s.startsWith(String.valueOf(startingLetter)))
      .count();
    System.out.println("\nNumber of colors starting with '" + startingLetter + "': " + ctr);
    char startingLetter1 = 'Y';
    // Count strings starting with a specific letter
    ctr = colors.stream()
      .filter(s -> s.startsWith(String.valueOf(startingLetter1)))
      .count();
    System.out.println("\nNumber of colors starting with '" + startingLetter1 + "': " + ctr);
  }
}

6. Write a Java program to sort a list of strings in alphabetical order, ascending and descending using streams.
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

public class Main {
  public static void main(String[] args) {
    List < String > colors = Arrays.asList("Red", "Green", "Blue", "Pink", "Brown");
    System.out.println("Original List of strings(colors): " + colors);
    // Sort strings in ascending order
    List < String > ascendingOrder = colors.stream()
      .sorted()
      .collect(Collectors.toList());

    // Sort strings in descending order
    List < String > descendingOrder = colors.stream()
      .sorted(Comparator.reverseOrder())
      .collect(Collectors.toList());

    System.out.println("\nSorted in Ascending Order: " + ascendingOrder);
    System.out.println("\nSorted in Descending Order: " + descendingOrder);
  }
}

7. Write a Java program to find the maximum and minimum values in a list of integers using streams.
import java.util.Arrays;
import java.util.List;

public class Main {
  public static void main(String[] args) {
    List < Integer > nums = Arrays.asList(1, 17, 54, 14, 14, 33, 45, -11);
    System.out.println("Original list of numbers: " + nums);
    // Find the maximum value
    Integer max_val = nums.stream()
      .max(Integer::compare)
      .orElse(null);

    // Find the minimum value
    Integer min_val = nums.stream()
      .min(Integer::compare)
      .orElse(null);

    System.out.println("\nMaximum value of the said list: " + max_val);
    System.out.println("\nMinimum value of the said list: " + min_val);
  }
}

8. Write a Java program to find the second smallest and largest elements in a list of integers using streams.
import java.util.Arrays;
import java.util.List;

public class Main {
  public static void main(String[] args) {
    List < Integer > nums = Arrays.asList(1, 17, 54, 14, 14, 33, 45, -11);
    System.out.println("List of numbers: " + nums);
    // Find the second smallest element
    Integer secondSmallest = nums.stream()
      .distinct()
      .sorted()
      .skip(1)
      .findFirst()
      .orElse(null);

    // Find the second largest element
    Integer secondLargest = nums.stream()
      .distinct()
      .sorted((a, b) -> Integer.compare(b, a))
      .skip(1)
      .findFirst()
      .orElse(null);

    System.out.println("\nSecond smallest element: " + secondSmallest);
    System.out.println("\nSecond largest element: " + secondLargest);
  }
}
